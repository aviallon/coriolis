
 // -*- C++ -*-

 namespace Kite {

 /*! \class        KiteEngine
  *
  *  \brief        The Kite Tool
  *
  *                <b>Lookup Mechanism</b>
  *
  *                Please look at Kite::Session for an explanation of the lookup
  *                mechanism from Hurricane::Segment or Katabatic::AutoSegment to
  *                TrackSegment.
  */


 //! \function     const Name& KiteEngine::staticGetName ();
 //! \sreturn      The unique string identifier for the KiteEngine class of ToolEngine.

 //! \function     KiteEngine* KiteEngine::create ( Cell* cell );
 //!               Create a KiteEngine on \c cell.

 //! \function     KiteEngine* KiteEngine::get ( const Cell* cell );
 //! \sreturn      The KiteEngine associated to \c cell. \c NULL if there isn't.

 //! \function     KatabaticEngine* KiteEngine::base ();
 //! \sreturn      The KiteEngine, casted as it's base class (KatabaticEngine).

 //! \function     Configuration* KiteEngine::getKiteConfiguration ();
 //! \sreturn      The KiteEngine configuration. The Kite Configuration is a derived
 //!               class of KatabaticConfiguration.

 //! \function     Configuration* KiteEngine::getConfiguration ();
 //! \sreturn      The KiteEngine configuration.

 //! \function     Net* KiteEngine::getBlockageNet ();
 //! \sreturn      The Net which is used to mark the blockage segments. It's not part of
 //!               the Configuration <em>per se</em> but an isolated attribute.  

 //! \function     bool  KiteEngine::getToolSuccess () const;
 //! \sreturn      \true if the tool was successful, that is, all the Net were routeds.

 //! \function     unsigned long  KiteEngine::getEventsLimit () const;
 //! \sreturn      The maximal number of allowed routing events. This limit is a security
 //!               against infinite looping, be sure that it is great enough not to
 //!               prevent normal routing completion.

 //! \function     unsigned long  KiteEngine::getRipupLimit ( unsigned int type ) const;
 //! \sreturn      the maximum ripup allowed of a segment of \c type.

 //! \function     unsigned long  KiteEngine::getRipupCost () const;
 //! \sreturn      the differential used while comparing two ripup costs.

 }
