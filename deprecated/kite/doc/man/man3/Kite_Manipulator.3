.TH "Manipulator" 3 "Sun Nov 21 2021" "Version 1.0" "Kite - Detailed Router" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Manipulator \- Handle \fBTrackElement\fP ripup & topological modifications\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBFunctionFlag\fP { \fBToRipupLimit\fP = 0x0001, \fBAllowExpand\fP = 0x0002, \fBNoExpand\fP = 0x0004, \fBPerpandicularsFirst\fP = 0x0008, \fBToMoveUp\fP = 0x0010, \fBAllowLocalMoveUp\fP = 0x0020, \fBAllowTerminalMoveUp\fP = 0x0040, \fBAllowShortPivotUp\fP = 0x0080, \fBNoDoglegReuse\fP = 0x0100, \fBLeftAxisHint\fP = 0x0200, \fBRightAxisHint\fP = 0x0400, \fBNotOnLastRipup\fP = 0x0800 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBManipulator\fP (\fBTrackElement\fP *, \fBSegmentFsm\fP &)"
.br
.ti -1c
.RI "\fBTrackElement\fP * \fBgetSegment\fP () const"
.br
.ti -1c
.RI "\fBDataNegociate\fP * \fBgetData\fP () const"
.br
.ti -1c
.RI "\fBRoutingEvent\fP * \fBgetEvent\fP () const"
.br
.ti -1c
.RI "bool \fBcanRipup\fP (unsigned int flags=0) const"
.br
.ti -1c
.RI "bool \fBisCaged\fP (\fBDbU::Unit\fP) const"
.br
.ti -1c
.RI "bool \fBripup\fP (unsigned int type, \fBDbU::Unit\fP axisHint=0)"
.br
.ti -1c
.RI "bool \fBripupPerpandiculars\fP (unsigned int flags=0)"
.br
.ti -1c
.RI "void \fBrepackPerpandiculars\fP ()"
.br
.ti -1c
.RI "bool \fBripple\fP ()"
.br
.ti -1c
.RI "bool \fBminimize\fP ()"
.br
.ti -1c
.RI "bool \fBslacken\fP (unsigned int flags=KbNoFlags)"
.br
.ti -1c
.RI "bool \fBpivotUp\fP ()"
.br
.ti -1c
.RI "bool \fBpivotDown\fP ()"
.br
.ti -1c
.RI "bool \fBmoveUp\fP (unsigned int flags=0)"
.br
.ti -1c
.RI "bool \fBmakeDogleg\fP ()"
.br
.ti -1c
.RI "bool \fBmakeDogleg\fP (\fBDbU::Unit\fP)"
.br
.ti -1c
.RI "bool \fBmakeDogleg\fP (\fBInterval\fP)"
.br
.ti -1c
.RI "bool \fBrelax\fP (\fBInterval\fP, unsigned int flags=\fBAllowExpand\fP)"
.br
.ti -1c
.RI "bool \fBinsertInTrack\fP (size_t)"
.br
.ti -1c
.RI "bool \fBshrinkToTrack\fP (size_t, unsigned int flags=0, \fBDbU::Unit\fP leftAxisHint=0, \fBDbU::Unit\fP rightAxisHint=0)"
.br
.ti -1c
.RI "bool \fBforceToTrack\fP (size_t)"
.br
.ti -1c
.RI "bool \fBforceOverLocals\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Handle \fBTrackElement\fP ripup & topological modifications\&. 


.SH "Manipulator Structure"
.PP
A \fBManipulator\fP basically binds together a \fBTrackElement\fP, it's \fBDataNegociate\fP and \fBRoutingEvent\fP (cached for fast access), and \fBa\fP \fBSegmentFsm\fP\&.
.PP
\fIThe \fBTrackElement\fP may differs from the one of the \fBSegmentFsm\fP\&.\fP This can occurs when manipulating perpandiculars or segments from other nets in conflict\&. For example: \fBManipulator::isCaged()\fP\&.
.PP
In the following documentation, the segment \fIwhich is associated to the \fBSegmentFsm\fP\fP will be called the \fIreference segment\fP\&.
.SH "Delayed Modifications"
.PP
It is important to note that when a \fBManipulator\fP is called to modificate a \fBTrackElement\fP, nothing is actually done by the \fBManipulator\fP itself\&. Instead, the \fBManipulator\fP create the relevant \fBSegmentAction\fP (s) that are stored in the \fBSegmentFsm\fP\&. The action themselves are done at the end of the \fBSegmentFsm\fP lifecycle (wrapped inside a \fBSession\fP)\&.
.PP
This is not true! When dogleg are created, the topology is immediatly modificated\&. That way of doing must be clarified\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBFunctionFlag\fP"
The various flags that can be passed to the \fBManipulator\fP methods\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIToRipupLimit \fP\fP
The ripup limit must be immediatly to it's limit for the current state\&. 
.TP
\fB\fIAllowExpand \fP\fP
Allow break points for dogleg not to be exactly on the requested position\&. Meaning that they are moved to the least congested GCell\&. 
.TP
\fB\fINoExpand \fP\fP
Breakpoints for dogleg are kept right where they are requested\&. 
.TP
\fB\fIPerpandicularsFirst \fP\fP
Reorder the events so that perpandiculars segments are re-processed before their reference segment\&. By default this is the other way around\&. 
.TP
\fB\fIToMoveUp \fP\fP
Try to move up ripped up segments\&. 
.TP
\fB\fIAllowLocalMoveUp \fP\fP
Allow local segments to be moved up (forbidden by default)\&. 
.TP
\fB\fIAllowTerminalMoveUp \fP\fP
Allow terminal segments to be moved up (forbidden by default)\&. 
.TP
\fB\fIAllowShortPivotUp \fP\fP
Allow short segment yo be pivoted up\&. 
.TP
\fB\fINoDoglegReuse \fP\fP
When creating a dogleg, the default behavior is \fInot\fP to create a new one if there's already one in the same GCell\&. If this flag is set, a second dogleg will be created\&. 
.TP
\fB\fILeftAxisHint \fP\fP
An explicit left axis hint has been supplied as argument\&. 
.TP
\fB\fIRightAxisHint \fP\fP
An explicit right axis hint has been supplied as argument\&. 
.TP
\fB\fINotOnLastRipup \fP\fP
The reference segment has still more than one ripup to go for the given state\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBManipulator\fP (\fBTrackElement\fP * segment, \fBSegmentFsm\fP & fsm)"

.PP
\fBParameters:\fP
.RS 4
\fIsegment\fP The \fBTrackElement\fP to manipulate\&. 
.br
\fIfsm\fP The associated \fBSegmentFsm\fP\&.
.RE
.PP
Construct a new \fBManipulator\fP on \fCsegment\fP\&. 
.PP
Referenced by Manipulator::forceOverLocals(), Manipulator::forceToTrack(), Manipulator::insertInTrack(), Manipulator::ripupPerpandiculars(), and Manipulator::shrinkToTrack()\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBTrackElement\fP * getSegment () const\fC [inline]\fP"
\fBReturns:\fP The working \fBTrackElement\fP\&. 
.SS "\fBDataNegociate\fP * getData () const\fC [inline]\fP"
\fBReturns:\fP The \fBDataNegociate\fP of the \fBTrackElement\fP (act as a cache)\&. 
.SS "\fBRoutingEvent\fP * getEvent () const\fC [inline]\fP"
\fBReturns:\fP The \fBRoutingEvent\fP associated to the \fBTrackElement\fP (act as a cache)\&. 
.SS "bool canRipup (unsigned int flags = \fC0\fP) const"
\fBReturns:\fP \fBtrue\fP if the maximum ripup, for the given \fBSegmentFsm::State\fP has not been reached\&. If \fCflags\fP contains Manipulator::HasNextRipup, return \fBtrue\fP \fBonly\fP if it still have at least one ripup to go\&. 
.PP
Referenced by Manipulator::forceToTrack(), and Manipulator::ripup()\&.
.SS "bool isCaged (\fBDbU::Unit\fP axis) const"
\fBReturns:\fP \fBtrue\fP if the segment is enclosed (in it's \fBTrack\fP) by two fixed or blockage segments which at least one is closer than 10 lambdas from \fCaxis\fP\&. Mostly used to know if a perpandicular is actually restricting the axis span of a reference segment\&. 
.PP
Referenced by Manipulator::ripupPerpandiculars()\&.
.SS "bool ripup (unsigned int type, \fBDbU::Unit\fP axisHint = \fC0\fP)"

.PP
\fBParameters:\fP
.RS 4
\fItype\fP The type of ripup action\&. 
.br
\fIaxisHint\fP An indication as where to move the riped up segment\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBtrue\fP if the operation has succedeed\&.
.RE
.PP
If the \fBTrackElement\fP can be ripped up, schedule a ripup action, possibly with a hint for the preferred axis position\&. 
.PP
Referenced by Manipulator::forceOverLocals(), Manipulator::forceToTrack(), Manipulator::insertInTrack(), and Manipulator::ripupPerpandiculars()\&.
.SS "bool ripupPerpandiculars (unsigned int flags = \fC0\fP)"
Schedule a ripup of all the perpandiculars of the reference segment\&. \fCflags\fP that modificate the behavior:
.IP "\(bu" 2
\fBManipulator::PerpandicularsFirst\fP : the queue will be reordered so that all the perpandiculars are re-processed (placed) before the reference segment\&.
.IP "\(bu" 2
\fBManipulator::ToRipupLimit\fP : the ripup count of the reference segment is set to the limit (i\&.e\&. only one more attempt before a slackening occurs)\&.
.PP
.PP
The method will fails (return \fBfalse\fP) if at least one perpandicular can't be changed of track (i\&.e\&. ripped up) \fBand\fP none of it's neighbors could be ripped up either\&. Meaning that the free span on that track cannot be changed\&. 
.PP
Referenced by SegmentFsm::conflictSolveByPlaceds()\&.
.SS "bool repackPerpandiculars ()"
Ripup all the perpandiculars of the reference segment, except fixed or globals\&. The reference segment is rescheduled first (before it's perpandicular)\&.
.PP
This function may be used to find a better placement, maximizing the overlap of the various perpandiculars\&.
.PP
Ripup all perpandiculars and the reference segment itself for a complete re-placement\&. The reference segment will be reprocessed \fIbefore\fP it's perpandiculars\&. 
.SS "bool ripple ()"
\fBReturns:\fP true if the reference segment is local\&.
.PP
Applies only on reference segments that are of local type\&. Tries to make room for the reference segment by ripping up it's neigbors on the parallels tracks\&. On a vertical plane, left neigbors are shifted one track left (trough axis hint) and right ones, one track right\&. Note that they are ripped up and the shift is just a hint, there's no guarantee that the router can honor it\&. 
.PP
Referenced by Manipulator::ripupPerpandiculars()\&.
.SS "bool minimize ()"
\fBReturns:\fP true if the reference segment can be mimized in a suitable track hole\&.
.PP
Compute the miminal span of the reference segment, summing up contraints from source anchor and target anchors (if any) and perpandiculars\&. Then find holes in the avalaible tracks, and check if one is suitable for the miminized segment (try first the biggest hole)\&.
.PP
This operation can only be called once on a segment (a flag is set in the event)\&. 
.SS "bool slacken (unsigned int flags = \fCKbNoFlags\fP)"
Simple proxy towards TrackElement::slacken()\&.
.PP
To be reviewed\&. 
.SS "bool pivotUp ()"
Tries to move up the reference segment\&. The segment will be moved up only if a half track is free (for a local) or a full track is free (for a global)\&.
.PP
This function do not modifies/create perpandiculars\&. 
.PP
Referenced by SegmentFsm::solveFullBlockages()\&.
.SS "bool pivotDown ()"
Tries to move down the reference segment\&. The segment will be moved up only if \fItwo\fP track are free (whether global or local)\&. Is is more restrictive than \fBManipulator::pivotUp()\fP\&.
.PP
This function do not modifies/create perpandiculars\&. 
.SS "bool moveUp (unsigned int flags = \fC0\fP)"
Tries to move up a segment, if there is enough space in the \fBRoutingPlane\fP above and in the same direction\&.
.PP
This function may modificate perpandiculars in order to maintain connexity\&.
.PP
To be reviewed\&. 
.PP
Referenced by SegmentFsm::solveFullBlockages()\&.
.SS "bool makeDogleg ()"
\fBReturns:\fP \fBfalse\fP if the segment is \fInot\fP local or the dogleg cannot be done\&.
.PP
For \fIlocal\fP reference segment only, look in the first track candidate for other segment overlapping and break the reference accordingly\&. 
.SS "bool makeDogleg (\fBDbU::Unit\fP position)"
Create a dogleg in the GCell under \fCposition\fP\&. 
.SS "bool makeDogleg (\fBInterval\fP overlap)"
Create a dogleg to avoid the obstructed interval \fCoverlap\fP\&. 
.SS "bool relax (\fBInterval\fP overlap, unsigned int flags = \fC\fBAllowExpand\fP\fP)"
Break the reference segment so it can detour around the interval \fCoverlap\fP\&. If \fCoverlap\fP is completly enclosed inside the span of the reference segment two dogleg will be created\&. If the overlap occurs only on one side of the reference segment, only one dogleg will be created\&.
.PP
If \fCflags\fP contains \fBManipulator::AllowExpand\fP, the dogleg are not created exactly at the edges of the overlap but on the lowest density GCell (outside the overlap interval)\&.
.PP
The axis of the created dogleg are sets so that the broken part of the segment completly enclose \fCoverlap\fP\&. That is, the orignal segment no longer intersect with \fCoverlap\fP\&. So the min dogleg is pushed to the left and the max to the right if they are in the same GCell as the min/max of \fCoverlap\fP\&. Otherwise (they have been expanded), they are put in the center of the GCell\&.
.PP
We do not allow to dogleg twice in the same GCell, so if min or max is in respectively the first or last GCell, it is not done\&. Moreover if there is only one dogleg \fIand\fP it is in the first or last GCell, the relax method is cancelled (and returns \fBfalse\fP)\&. It means that this is the segment which is likely to be enclosed inside \fCoverlap\fP\&.
.PP
\fBImportant:\fP The doglegs are created immediatly and not in a delayed fashion like the \fBSegmentAction\fP\&.
.PP
Two Doglegs (min & max), no expansion Two Doglegs (min & max), with expansion One Dogleg (min) One Dogleg (max) 
.SS "bool insertInTrack (size_t i)"
Try to insert the reference segment in the track at index \fCi\fP (in the cost table from \fBSegmentFsm\fP)\&. The insertion is done by ripping up overlapping segment or shrinking them to left/right if possible\&.
.PP
This operation ripup the processed segment neighbors (and their perpandiculars)\&. 
.SS "bool shrinkToTrack (size_t i, unsigned int flags = \fC0\fP, \fBDbU::Unit\fP leftAxisHint = \fC0\fP, \fBDbU::Unit\fP rightAxisHint = \fC0\fP)"
Attempt to minimize the reference segment to fit into the track\&. For this operation to succeed, the minimal span of the segment must not overlap any other segment already in the track\&. To reach the minimal span the perpandiculars are ripped up with an axis hint which is the center of the minimal span or the explicit value given as arguments \fCleftAxisHint\fP and \fCrightAxisHint\fP if \fCflags\fP contains respectively \fBManipulator::LeftAxisHint\fP or \fBManipulator::RightAxisHint\fP\&.
.PP
This operation ripup the processed segment itself and its perpandiculars\&. 
.SS "bool forceToTrack (size_t i)"
Try to insert the reference segment in the track at index \fCi\fP (in the cost table from \fBSegmentFsm\fP)\&. The insertion is done by \fIforcibly\fP ripping up the overlapping segments \fBand\fP their perpandiculars\&.
.PP
This operation ripup the processed segment neighbors (and their perpandiculars)\&. 
.SS "bool forceOverLocals ()"
Loop over all the candidate tracks and, insert in the first which all conflicting segments are locals (rip them up)\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Kite - Detailed Router from the source code\&.
