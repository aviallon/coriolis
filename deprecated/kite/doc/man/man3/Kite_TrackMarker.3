.TH "TrackMarker" 3 "Sun Nov 21 2021" "Version 1.0" "Kite - Detailed Router" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TrackMarker \- Tag part of \fBTrack\fP with a weight\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNet\fP * \fBgetNet\fP () const"
.br
.ti -1c
.RI "\fBDbU::Unit\fP \fBgetSourceU\fP () const"
.br
.ti -1c
.RI "\fBDbU::Unit\fP \fBgetTargetU\fP () const"
.br
.ti -1c
.RI "\fBTrack\fP * \fBgetTrack\fP () const"
.br
.ti -1c
.RI "unsigned int \fBgetWeight\fP (const \fBTrack\fP *) const"
.br
.ti -1c
.RI "void \fBsetTrack\fP (\fBTrack\fP *)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBTrackMarker\fP * \fBcreate\fP (\fBRoutingPad\fP *, size_t depth)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Tag part of \fBTrack\fP with a weight\&. 

TrackMarkers are used to assign a cost on a span of \fBTrack\fP telling how strongly a terminal is dependant on that \fBTrack\fP to be accessed\&. The more \fBTrack\fP a terminal crosses, the less the weight is\&.
.PP
The weight is expressed in hundreth (can also be understood as percentage) of dependency over the \fBTrack\fP\&. As example, if a terminal can only be accessed trough one \fBTrack\fP is weight on it will be \fC100\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "create (\fBRoutingPad\fP * rp, size_t depth)\fC [static]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIrp\fP The RoutingPad to be accessed\&. 
.br
\fIdepth\fP Select the layer depth by which we want to access the RoutingPad\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The newly created \fBTrackMarker\fP\&.
.RE
.PP
This constructor automatically take care of inserting the \fBTrackMarker\fP in the relevant Tracks, so it must be called during a \fBSession\fP\&. 
.SS "\fBNet\fP * getNet () const"
\fBReturns:\fP The net of the RoutingPad\&. 
.SS "\fBDbU::Unit\fP getSourceU () const\fC [inline]\fP"
\fBReturns:\fP The span minimum bound\&. 
.SS "\fBDbU::Unit\fP getTargetU () const\fC [inline]\fP"
\fBReturns:\fP The span maximum bound\&. 
.SS "\fBTrack\fP * getTrack () const\fC [inline]\fP"
\fBReturns:\fP The \fBTrack\fP into which the marker is inserted\&. 
.SS "unsigned int getWeight (const \fBTrack\fP * track) const\fC [inline]\fP"
\fBReturns:\fP The associated weight, for now the \fBTrack\fP argument is ignored\&. 
.SS "void setTrack (\fBTrack\fP * track)\fC [inline]\fP"
Sets the owning \fBTrack\fP\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Kite - Detailed Router from the source code\&.
