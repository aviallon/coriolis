.TH "TrackFixedSegment" 3 "Sun Nov 21 2021" "Version 1.0" "Kite - Detailed Router" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TrackFixedSegment \- \fBTrack\fP elements for fixed wires\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBTrackElement\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBisHorizontal\fP () const"
.br
.ti -1c
.RI "virtual bool \fBisVertical\fP () const"
.br
.ti -1c
.RI "virtual bool \fBisFixed\fP () const"
.br
.ti -1c
.RI "virtual unsigned long \fBgetId\fP () const"
.br
.ti -1c
.RI "virtual unsigned int \fBgetDirection\fP () const"
.br
.ti -1c
.RI "virtual \fBNet\fP * \fBgetNet\fP () const"
.br
.ti -1c
.RI "virtual const \fBLayer\fP * \fBgetLayer\fP () const"
.br
.ti -1c
.RI "virtual \fBTrackElement\fP * \fBgetNext\fP () const"
.br
.ti -1c
.RI "virtual \fBTrackElement\fP * \fBgetPrevious\fP () const"
.br
.ti -1c
.RI "virtual \fBDbU::Unit\fP \fBgetAxis\fP () const"
.br
.ti -1c
.RI "virtual \fBInterval\fP \fBgetFreeInterval\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBTrackElement\fP * \fBcreate\fP (\fBKite::Track\fP *track, \fBSegment\fP *segment)"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBTrack\fP elements for fixed wires\&. 

A \fBTrackFixedSegment\fP is a segment that cannot be moved from the track\&. It can be associated to a true blockage Segment (recognised by the fact that their owner net is the \fIblockage\fP net), or to a segment from an ordinary net but which is locked into position\&. In the latter case, the owned net may reuse this portion of the track if it needs it\&.
.PP
In all cases, the blockage ratio of the GCells underneath the segment are updated\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBTrackSegment\fP * create (\fBKite::Track\fP * track, \fBSegment\fP * segment)\fC [static]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIsegment\fP The Hurricane Segment (blockage) to take into account\&. 
.br
\fItrack\fP A \fBTrack\fP into which insert the \fBTrackFixedSegment\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBTrackFixedSegment\fP wrapped around a blockage Segment\&.
.RE
.PP
Public constructor to insert blockage inside a \fBTrack\fP\&. 
.SS "bool isHorizontal () const\fC [virtual]\fP"
\fBSee also:\fP  \fBKatabatic::AutoSegment::isHorizontal()\fP\&. 
.PP
Implements \fBTrackElement\fP\&.
.SS "bool isVertical () const\fC [virtual]\fP"
\fBSee also:\fP  \fBKatabatic::AutoSegment::isVertical()\fP\&. 
.PP
Implements \fBTrackElement\fP\&.
.SS "bool isFixed () const\fC [virtual]\fP"
\fBSee also:\fP  \fBKatabatic::AutoSegment::isFixed()\fP\&. 
.PP
Reimplemented from \fBTrackElement\fP\&.
.SS "unsigned long getId () const\fC [virtual]\fP"

.PP
\fBReturns:\fP
.RS 4
The \fCId\fP of the supporting AutoSegment, if there is any\&. \fIZero\fP otherwise\&. 
.RE
.PP

.PP
Reimplemented from \fBTrackElement\fP\&.
.SS "unsigned int getDirection () const\fC [virtual]\fP"

.PP
\fBReturns:\fP
.RS 4
The direction of the supporting element (should match the preferred direction of the \fBTrack\fP)\&. 
.RE
.PP

.PP
Implements \fBTrackElement\fP\&.
.SS "\fBNet\fP * getNet () const\fC [virtual]\fP"
\fBReturns:\fP The Net associated to the element (may be \fCNULL\fP)\&. 
.PP
Implements \fBTrackElement\fP\&.
.PP
Referenced by TrackFixedSegment::getNext(), and TrackFixedSegment::getPrevious()\&.
.SS "const \fBLayer\fP * getLayer () const\fC [virtual]\fP"
\fBReturns:\fP The Layer of the element (should match the one of the \fBTrack\fP)\&. 
.PP
Implements \fBTrackElement\fP\&.
.SS "\fBTrackElement\fP * getNext () const\fC [virtual]\fP"
\fBReturns:\fP The next \fBTrackElement\fP, on the same track and of a \fIdifferent\fP net\&. \fBSee also:\fP  \fBTrack::getNext()\fP\&. 
.PP
Reimplemented from \fBTrackElement\fP\&.
.SS "\fBTrackElement\fP * getPrevious () const\fC [virtual]\fP"
\fBReturns:\fP The previous \fBTrackElement\fP, on the same track and of a \fIdifferent\fP net\&. \fBSee also:\fP  \fBTrack::getPrevious()\fP\&. 
.PP
Reimplemented from \fBTrackElement\fP\&.
.SS "\fBDbU::Unit\fP getAxis () const\fC [virtual]\fP"
\fBReturns:\fP The axis position of the element (must be the same as the \fBTrack\fP)\&. 
.PP
Implements \fBTrackElement\fP\&.
.SS "\fBInterval\fP getFreeInterval () const\fC [virtual]\fP"
\fBReturns:\fP The greatest free interval enclosing this element\&. 
.PP
Reimplemented from \fBTrackElement\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Kite - Detailed Router from the source code\&.
