.TH "ChipTools" 3 "Sun Nov 21 2021" "Version 1.0" "Katabatic - Routing Toolbox" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ChipTools \- Utilities for Chip Level Design\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBChipTools\fP (\fBCell\fP *)"
.br
.ti -1c
.RI "bool \fBisChip\fP () const"
.br
.ti -1c
.RI "\fBCell\fP * \fBgetCell\fP () const"
.br
.ti -1c
.RI "\fBInstance\fP * \fBgetCore\fP () const"
.br
.ti -1c
.RI "const \fBBox\fP & \fBgetChipBb\fP () const"
.br
.ti -1c
.RI "const \fBBox\fP & \fBgetLeftPadsBb\fP () const"
.br
.ti -1c
.RI "const \fBBox\fP & \fBgetRightPadsBb\fP () const"
.br
.ti -1c
.RI "const \fBBox\fP & \fBgetTopPadsBb\fP () const"
.br
.ti -1c
.RI "const \fBBox\fP & \fBgetBottomPadsBb\fP () const"
.br
.ti -1c
.RI "const Torus & \fBgetCorona\fP () const"
.br
.ti -1c
.RI "bool \fBintersectVPads\fP (const \fBBox\fP &) const"
.br
.ti -1c
.RI "bool \fBintersectHPads\fP (const \fBBox\fP &) const"
.br
.in -1c
.SH "Detailed Description"
.PP 
Utilities for Chip Level Design\&. 

The \fBChipTools\fP class provides a small set of utilities to ease the managment of a complete chip following the Alliance top hierarchical structure\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBChipTools\fP (\fBCell\fP * cell)"
Create a ChipTool for \fCcell\fP\&. 
.PP
References Cell::getAbutmentBox(), Entity::getBoundingBox(), DataBase::getDB(), Box::getHeight(), Net::getHorizontals(), Technology::getLayer(), Instance::getMasterCell(), Instance::getName(), Cell::getName(), Cell::getNet(), DataBase::getTechnology(), Box::getWidth(), Box::getXMax(), Box::getXMin(), Box::getYMax(), Box::getYMin(), Box::inflate(), and ChipTools::isChip()\&.
.SH "Member Function Documentation"
.PP 
.SS "bool isChip () const\fC [inline]\fP"
\fBReturns:\fP \fBtrue\fP if the Cell is truly a top level design\&. If not, this object is useless and does nothing\&. 
.PP
Referenced by ChipTools::ChipTools(), KatabaticEngine::createDetailedGrid(), and KatabaticEngine::isChip()\&.
.SS "\fBCell\fP * getCell () const\fC [inline]\fP"
\fBReturns:\fP The top-level design\&. 
.SS "\fBInstance\fP * getCore () const\fC [inline]\fP"
\fBReturns:\fP The instance of the core, that is, the only instance that is \fInot\fP a pad\&.\&.\&. 
.SS "const \fBBox\fP & getChipBb () const\fC [inline]\fP"
\fBReturns:\fP The chip complete bounding box, this *is* simply the Cell bounding box\&. 
.SS "const \fBBox\fP & getLeftPadsBb () const\fC [inline]\fP"
\fBReturns:\fP The bounding box enclosing all the pads on the left side of the chip\&.
.PP
\fBRemark: This box is computed from the chip bounding box and the pad height\&. \fP
.RS 4

.RE
.PP

.SS "const \fBBox\fP & getRightPadsBb () const\fC [inline]\fP"
\fBReturns:\fP The bounding box enclosing all the pads on the right side of the chip\&.
.PP
\fBRemark: This box is computed from the chip bounding box and the pad height\&. \fP
.RS 4

.RE
.PP

.SS "const \fBBox\fP & getTopPadsBb () const\fC [inline]\fP"
\fBReturns:\fP The bounding box enclosing all the pads on the top side of the chip\&.
.PP
\fBRemark: This box is computed from the chip bounding box and the pad height\&. \fP
.RS 4

.RE
.PP

.SS "const \fBBox\fP & getBottomPadsBb () const\fC [inline]\fP"
\fBReturns:\fP The bounding box enclosing all the pads on the bottom side of the chip\&.
.PP
\fBRemark: This box is computed from the chip bounding box and the pad height\&. \fP
.RS 4

.RE
.PP

.SS "const Torus & getCorona () const\fC [inline]\fP"
\fBReturns:\fP The torus (in term of manhanttan distance) enclosed between the pad area and the core area\&. 
.SS "bool intersectVPads (const \fBBox\fP & box) const\fC [inline]\fP"
\fBReturns:\fP \fBtrue\fP if \fCbox\fP intersect either the left or right pad box\&. 
.PP
References Box::intersect()\&.
.SS "bool intersectHPads (const \fBBox\fP & box) const\fC [inline]\fP"
\fBReturns:\fP \fBtrue\fP if \fCbox\fP intersect either the top or bottom pad box\&. 
.PP
References Box::intersect()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Katabatic - Routing Toolbox from the source code\&.
